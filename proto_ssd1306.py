import smbus2
import time

# SSD1306 I2C address
I2C_ADDRESS = 0x3C

# Initialize I2C bus
i2c_bus = smbus2.SMBus(1)  # Change the bus number as needed


FONT = [
    0x00, 0x00, 0x00, 0x00, 0x00,  # (space)
    0x00, 0x00, 0x5F, 0x00, 0x00,  # !
    0x00, 0x07, 0x00, 0x07, 0x00,  # "
    0x14, 0x7F, 0x14, 0x7F, 0x14,  # #
    0x24, 0x2A, 0x7F, 0x2A, 0x12,  # $
    0x23, 0x13, 0x08, 0x64, 0x62,  # %
    0x36, 0x49, 0x55, 0x22, 0x50,  # &
    0x00, 0x05, 0x03, 0x00, 0x00,  # '
    0x00, 0x1C, 0x22, 0x41, 0x00,  # (
    0x00, 0x41, 0x22, 0x1C, 0x00,  # )
    0x14, 0x08, 0x3E, 0x08, 0x14,  # *
    0x08, 0x08, 0x3E, 0x08, 0x08,  # +
    0x00, 0x50, 0x30, 0x00, 0x00,  # ,
    0x08, 0x08, 0x08, 0x08, 0x08,  # -
    0x00, 0x60, 0x60, 0x00, 0x00,  # .
    0x20, 0x10, 0x08, 0x04, 0x02,  # /

    0x3E, 0x51, 0x49, 0x45, 0x3E,  # 0
    0x00, 0x42, 0x7F, 0x40, 0x00,  # 1
    0x42, 0x61, 0x51, 0x49, 0x46,  # 2
    0x21, 0x41, 0x45, 0x4B, 0x31,  # 3
    0x18, 0x14, 0x12, 0x7F, 0x10,  # 4
    0x27, 0x45, 0x45, 0x45, 0x39,  # 5
    0x3C, 0x4A, 0x49, 0x49, 0x30,  # 6
    0x01, 0x71, 0x09, 0x05, 0x03,  # 7
    0x36, 0x49, 0x49, 0x49, 0x36,  # 8
    0x06, 0x49, 0x49, 0x29, 0x1E,  # 9

    0x00, 0x36, 0x36, 0x00, 0x00,  # :
    0x00, 0x56, 0x36, 0x00, 0x00,  # ;
    0x08, 0x14, 0x22, 0x41, 0x00,  # <
    0x14, 0x14, 0x14, 0x14, 0x14,  # =
    0x00, 0x41, 0x22, 0x14, 0x08,  # >
    0x02, 0x01, 0x51, 0x09, 0x06,  # ?
    0x32, 0x49, 0x59, 0x51, 0x3E,  # @

    0x7E, 0x11, 0x11, 0x11, 0x7E,  # A
    0x7F, 0x49, 0x49, 0x49, 0x36,  # B
    0x3E, 0x41, 0x41, 0x41, 0x22,  # C
    0x7F, 0x41, 0x41, 0x22, 0x1C,  # D
    0x7F, 0x49, 0x49, 0x49, 0x41,  # E   0x7F, 0x49, 0x49, 0x49, 0x41,  # E 
    0x7F, 0x09, 0x09, 0x09, 0x01,  # F
    0x3E, 0x41, 0x49, 0x49, 0x7A,  # G
    0x7F, 0x08, 0x08, 0x08, 0x7F,  # H
    0x00, 0x41, 0x7F, 0x41, 0x00,  # I
    0x20, 0x40, 0x41, 0x3F, 0x01,  # J
    0x7F, 0x08, 0x14, 0x22, 0x41,  # K
    0x7F, 0x40, 0x40, 0x40, 0x40,  # L
    0x7F, 0x02, 0x0C, 0x02, 0x7F,  # M
    0x7F, 0x04, 0x08, 0x10, 0x7F,  # N
    0x3E, 0x41, 0x41, 0x41, 0x3E,  # O
    0x7F, 0x09, 0x09, 0x09, 0x06,  # P
    0x3E, 0x41, 0x51, 0x21, 0x5E,  # Q
    0x7F, 0x09, 0x19, 0x29, 0x46,  # R
    0x46, 0x49, 0x49, 0x49, 0x31,  # S
    0x01, 0x01, 0x7F, 0x01, 0x01,  # T
    0x3F, 0x40, 0x40, 0x40, 0x3F,  # U
    0x1F, 0x20, 0x40, 0x20, 0x1F,  # V
    0x3F, 0x40, 0x38, 0x40, 0x3F,  # W
    0x63, 0x14, 0x08, 0x14, 0x63,  # X
    0x07, 0x08, 0x70, 0x08, 0x07,  # Y
    0x61, 0x51, 0x49, 0x45, 0x43,  # Z
    
    0x5B, 0x22, 0x41, 0x22, 0x5B,  # [
    0x02, 0x04, 0x08, 0x10, 0x20,  # \
    0x5B, 0x22, 0x41, 0x22, 0x5B,  # ]
    0x02, 0x01, 0x51, 0x09, 0x06,  # ^
    0x40, 0x40, 0x40, 0x40, 0x40,  # _
    0x03, 0x05, 0x00, 0x03, 0x05,  # `
    
    0x30, 0x4A, 0x4A, 0x4A, 0x7C,  # a0x29, 0x29, 0x29, 0x1F,  # a
    0x7F, 0x48, 0x44, 0x44, 0x38,  # b
    0x38, 0x44, 0x44, 0x44, 0x20,  # c
    0x38, 0x44, 0x44, 0x48, 0x7F,  # d
    0x38, 0x54, 0x54, 0x54, 0x18,  # e
    0x08, 0x7E, 0x09, 0x01, 0x02,  # f
    0x0C, 0x52, 0x52, 0x52, 0x3E,  # g
    0x7F, 0x08, 0x04, 0x04, 0x78,  # h
    0x00, 0x44, 0x7D, 0x40, 0x00,  # i
    0x20, 0x40, 0x44, 0x3D, 0x00,  # j
    0x7F, 0x10, 0x28, 0x44, 0x00,  # k
    0x00, 0x41, 0x7F, 0x40, 0x00,  # l
    0x7C, 0x04, 0x18, 0x04, 0x7C,  # m
    0x7C, 0x08, 0x04, 0x04, 0x78,  # n
    0x38, 0x44, 0x44, 0x44, 0x38,  # o
    0x7C, 0x14, 0x14, 0x14, 0x08,  # p
    0x08, 0x14, 0x14, 0x18, 0x7C,  # q
    0x7C, 0x08, 0x04, 0x04, 0x08,  # r
    0x48, 0x54, 0x54, 0x54, 0x20,  # s
    0x04, 0x3F, 0x44, 0x40, 0x20,  # t
    0x3C, 0x40, 0x40, 0x20, 0x7C,  # u
    0x1C, 0x20, 0x40, 0x20, 0x1C,  # v
    0x3C, 0x40, 0x30, 0x40, 0x3C,  # w
    0x44, 0x28, 0x10, 0x28, 0x44,  # x
    0x0C, 0x50, 0x50, 0x50, 0x3C,  # y
    0x44, 0x64, 0x54, 0x4C, 0x44,  # z
]

def init():
    
    # Initialize the OLED
    send_command(0xAE)  # Display off

    
    # Set display clock div
    send_command(0xD5)
    send_command(0x80)

    # Set multiplex
    send_command(0xA8)
    send_command(0x3F)
    
    # Set Displat offset
    send_command(0xD3)
    send_command(0x00)

    # Set startline
    send_command(0x40)
    
    # Set chargepump
    send_command(0x8D)
    send_command(0x14)

    # Set memory mode
    send_command(0x20)
    send_command(0x00)

    # Set SEGREMAP
    send_command(0xA0)

    # Set comscandec
    send_command(0xC8) 

    # Setcompins
    send_command(0xDA)
    send_command(0x12)

    # Setcontrast
    send_command(0x81)
    send_command(0xCF)
    
    # Set pre charge
    send_command(0xD9)
    send_command(0xF1)

    # Set com detect
    send_command(0xDB)
    send_command(0x40)

    # Set display on resume
    send_command(0xA4)
    
    # Set normal display
    send_command(0xA6)

    # Display on
    send_command(0xAF)


def send_command(command):
    i2c_bus.write_byte_data(I2C_ADDRESS, 0x00, command)

def send_data(data):
    max_chunk_size = 32
    for i in range(0, len(data), max_chunk_size):
        chunk = data[i:i + max_chunk_size]
        i2c_bus.write_i2c_block_data(I2C_ADDRESS, 0x40, chunk)

# Initialize the display
init()

# Clear the display
display_buffer = [0x00] * 128  # 128 bytes for a 128x64 display



for page in range(8):
    send_command(0xB0 + page)  # Set current page
    send_command(0x00)  # Set lower column address
    send_command(0x10)  # Set higher column address
    send_data(display_buffer)

# segment remap
send_command(0xA1)


# Function to display text at a specific position
def display_text(text, page, column):
    send_command(0xB0 + page)      # Set current page
    send_command(column & 0x00)    # Set lower column address
    send_command(0x10 + (column >> 4))  # Set higher column address
    print("The text:  ", text , "\n\n")
    for char in text:

        send_data([0x00]) # blank column before the letter

        char_code = ord(char) - 32  # Adjust the character code to the font data
        for byte in range(5):
            print("diplay ------------- char_code: ", char_code ," charc_code*5" ,(char_code * 5) ," byte: ", byte ,"       ", [FONT[char_code * 5 + byte]])
            send_data([FONT[char_code * 5 + byte]])

        send_data([0x00]) # blank column after the letter

# Display "Hello, World!" at page 2, column 0
display_text("hello there!", 0, 0)
display_text("abcdefghijklm", 2, 0)
display_text("nopqrstuvwxyz", 3, 0)

time.sleep(5)


# Wait for a few seconds before exiting
#time.sleep(20)

# Turn off the display
#send_command(0xAE)

# Close the I2C bus
i2c_bus.close()
